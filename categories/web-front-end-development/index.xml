<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Front-end Development on Syuan Tech Blog</title>
    <link>https://eva19950630.github.io/categories/web-front-end-development/</link>
    <description>Recent content in Web Front-end Development on Syuan Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 13 Jan 2019 11:00:13 +0800</lastBuildDate>
    
	<atom:link href="https://eva19950630.github.io/categories/web-front-end-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>［Vue.js］安裝CLI與建立Project</title>
      <link>https://eva19950630.github.io/2019/19_01_13_vuejs-proj-start/</link>
      <pubDate>Sun, 13 Jan 2019 11:00:13 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2019/19_01_13_vuejs-proj-start/</guid>
      <description> Install Vue CLI 目前版本：3.x以上，Release：2018/08。
Step1：安裝Node.js與npm套件管理工具 建議直接在官網下載Node.js安裝包：https://nodejs.org/en/download/
目前node.js安裝時，會一併將npm也裝好，因此當Node.js下載安裝完後，在terminal打指令查看是否有正確安裝完成：
$ node -v $ npm -v # 結果應該會出現node與npm目前安裝後的version  Step2：安裝Vue CLI 在linux command中，要使用npm安裝全域套件，需進root才有權限安裝。
$ sudo -s # 輸入密碼進入root $ npm install -g @vue/cli # 安裝後，查看vue版號，檢查是否安裝成功 $ vue --version  Reference  https://cli.vuejs.org/guide/  </description>
    </item>
    
    <item>
      <title>［CSS3］Flexbox</title>
      <link>https://eva19950630.github.io/2018/18_11_04_css-flexbox/</link>
      <pubDate>Sun, 04 Nov 2018 21:20:00 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_04_css-flexbox/</guid>
      <description>網頁前端設計時，時常遇到排版區塊的問題，目前有許多排版框架(如：Bootstrap)可以使用並快速排版，而其實CSS3提供了一個很好的排版模型：flexbox，這讓我們在排版介面時更加快速與彈性，而且能輕鬆進行響應式設計(RWD)，在各大瀏覽器也幾乎都支援，因此flexbox是近年來愈來愈多人在使用的排版模型。
Layout Box Model 首先先了解flexbox的佈局模型，才能較快上手flexbox，根據W3C的文章，flexbox的佈局模型如下圖：
從上圖可以觀察到：
 最外層有一個flex container包覆著內層兩個flex item的元件區塊：  意指當要使用flexbox時，需在所有要排版的元件區塊最外層包覆著一個容器，並給定flex效果，讓這個容器內所有元件區塊皆有flex效果。  最外層容器具有水平軸(main axis)、垂直軸(cross axis)、水平的起點與終點(main start、main end)、垂直的起點與終點(cross start、cross end)、水平尺寸(main size)與垂直尺寸(cross size)。  因此透過上圖，flexbox的模型概念可以了解成：
在一個有flex效果的父元件容器(container)當中，裝載著各個區塊子元件(items)，而每個item擺放的位置可透過設定main與cross去劃分位置，將各個區塊擺到相對應的位置上。
以下將分別介紹父元件容器(container)與子元件區塊(items)可應用的屬性。
父元件容器(container) display 在最外層容器一定要設定有flex效果，其內部子元件才會跟著有flex效果。使用display屬性設定，有兩種方式：
 display: flex：類似display: block，後方元素會強迫換行，但子元件有更多彈性的設定。 display: inline-flex：類似display: inline-block，意思即一個display: flex外包覆一個display: inline的屬性，後方元素不會換行。  .flex-container { display: flex | inline-flex; }  flex-direction 設定內部子元件的「排列方向」(主軸方向)。
預設值為先由左到右，再從上到下，總共有四種排列方式可以設定：
 flex-direction: row：預設值，先由左到右，再從上到下。 flex-direction: row-reverse：與row相反。 flex-direction: column：先從上到下，再由左到右。 flex-direction: column-reverse：與column相反。  .flex-container { display: flex; flex-direction: row | row-reverse | column | column-reverse; }  flex-wrap 設定內部子元件在父元件有限寬度內「是否換行」。</description>
    </item>
    
  </channel>
</rss>
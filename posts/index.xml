<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Syuan Tech Blog</title>
    <link>https://eva19950630.github.io/posts/</link>
    <description>Recent content in Posts on Syuan Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 12 Nov 2018 11:02:53 +0800</lastBuildDate>
    
	<atom:link href="https://eva19950630.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>［MySQL］SQL語法筆記</title>
      <link>https://eva19950630.github.io/2018/18_11_12_mysql-command-note/</link>
      <pubDate>Mon, 12 Nov 2018 11:02:53 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_12_mysql-command-note/</guid>
      <description>基本資料庫操作  通常這些行為在介面化工具輔助下，較不會使用語法去操作了。  建立/刪除/使用資料庫(database) # [db_name]為自定資料庫名稱 # 建立資料庫 create database [db_name]; # 刪除資料庫 drop database [db_name]; # 使用資料庫 use [db_name];  列出所有資料庫 show databases;  建立/刪除資料表(table) # [table_name]為自定資料表名稱；[column]為自定欄位名稱；[data_type]為設定資料型態 # 建立資料表 create table [table_name] ( [column1] [data_type], [column2] [data_type], [column3] [data_type], ... ); # 刪除資料表 drop table [table_name];  Tips
創建資料表時常用的資料型態(data type)：
   資料型態 範圍 說明     INT(size) 有符號範圍：(-2147483648，2147483647)；無符號範圍：(0，4294967295) 大整數值   CHAR(size) 0~255字元 固定長度字串   VARCHAR(size) 0~255字元 不固定長度字串   TEXT 0~65535字元 不固定長度字串   DATE 1000-01-01 ~ 9999-12-31 日期，格式：YYYY-MM-DD   DATETIME 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59 日期與時間，格式：YYYY-MM-DD HH:MI:SS   TIME -838:59:59 ~ 838:59:59 時間，格式：HH:MI:SS     更多型態：https://www.</description>
    </item>
    
    <item>
      <title>安裝Apache Tomcat Server(for Mac OS)</title>
      <link>https://eva19950630.github.io/2018/18_11_09_apache-tomcat-install-for-mac/</link>
      <pubDate>Fri, 09 Nov 2018 11:07:48 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_09_apache-tomcat-install-for-mac/</guid>
      <description>Tomcat是一個能執行Servlet和JavaServer Page(JSP)的伺服器(Web Container)，並提供作為Web server的一些特有功能(Tomcat管理和控制平台、安全域管理與Tomcat閥等)。 Tomcat包含組態管理工具，使用xml格式設定檔進行組態。  Download Apache Tomcat 8(Version 8.0.53) 目前穩定版本，Release Data：2018/06/29。
 https://tomcat.apache.org/download-80.cgi  下載Version8.0.53的.zip或.tar.gz，下載後解壓縮出一個apache-tomcat-8.0.53的資料夾。
Start/Stop Apache Tomcat Server Step1：將解壓縮後的apache-tomcat-8.0.53資料夾移至/usr/local目錄下 # 預設apache-tomcat-8.0.53資料夾位置在下載資料夾中 $ sudo mv ~/Download/apache-tomcat-8.0.53 /usr/local  Step2：新增symbolic link在/Library目錄下 $ sudo ln -s /usr/local/apache-tomcat-8.0.53 /Library/Tomcat  Step3：更改此symbolic link的使用者權限 # [username]更改為自己的username $ sudo chown -R [username] /Library/Tomcat  Step4：設定bin目錄下的所有shell scripts有被執行的權限 $ sudo chmod +x /Library/Tomcat/bin/*.sh  Step5：開啟/關閉Tomcat Server服務 # 開啟Tomcat Server服務 $ /Library/Tomcat/bin/startup.sh # 關閉Tomcat Server服務 $ /Library/Tomcat/bin/shutdown.</description>
    </item>
    
    <item>
      <title>［MySQL］安裝與介面化工具(for Mac OS)</title>
      <link>https://eva19950630.github.io/2018/18_11_08_mysql-install-for-mac/</link>
      <pubDate>Thu, 08 Nov 2018 22:54:39 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_08_mysql-install-for-mac/</guid>
      <description>Download MySQL Community Server 社群版本，開源免費，但不提供官方技術支援。
 https://dev.mysql.com/downloads/mysql/  Open/Stop MySQL Server  左上角蘋果圖示 &amp;ndash;&amp;gt; 系統偏好設定 &amp;ndash;&amp;gt; MySQL 進入操作頁面後，就可以開與關MySQL Server  Terminal Command 增加路徑至$PATH(iTerm2+Oh My Zsh) # 進入並編輯.zshrc檔案 $ vim ~/.zshrc # 增加以下敘述，增加後儲存離開 export PATH=&amp;quot;/usr/local/mysql/bin:$PATH&amp;quot; # 關掉terminal，重新打開，輸入以下指令查看$PATH是否有mysql執行路徑 $ echo $PATH  如此一來，即可在terminal上直接使用mysql開頭的指令了。
進入MySQL 若MySQL下載5.7以上的版本，則安裝包一開始會設定好root初始的密碼(亂數，安裝完需複製)。
# 若root沒有設定密碼 $ mysql -u root # 若root有設定密碼，會跳出輸入密碼的提示，輸入密碼後進入 $ mysql -u root -p  重新設定密碼 mysql&amp;gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;New Password&#39;;  選擇資料庫 mysql&amp;gt; use mysql;  刷新MySQL mysql&amp;gt; flush privileges;  離開MySQL mysql&amp;gt; quit  Mac用介面化工具(Sequel Pro) Step1：下載Sequel Pro  Sequel Pro  Step2：開啟Sequel Pro.</description>
    </item>
    
    <item>
      <title>［CSS3］Flexbox</title>
      <link>https://eva19950630.github.io/2018/18_11_04_css-flexbox/</link>
      <pubDate>Sun, 04 Nov 2018 21:20:00 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_04_css-flexbox/</guid>
      <description>網頁前端設計時，時常遇到排版區塊的問題，目前有許多排版框架(如：Bootstrap)可以使用並快速排版，而其實CSS3提供了一個很好的排版模型：flexbox，這讓我們在排版介面時更加快速與彈性，而且能輕鬆進行響應式設計(RWD)，在各大瀏覽器也幾乎都支援，因此flexbox是近年來愈來愈多人在使用的排版模型。
Layout Box Model 首先先了解flexbox的佈局模型，才能較快上手flexbox，根據W3C的文章，flexbox的佈局模型如下圖：
從上圖可以觀察到：
 最外層有一個flex container包覆著內層兩個flex item的元件區塊：  意指當要使用flexbox時，需在所有要排版的元件區塊最外層包覆著一個容器，並給定flex效果，讓這個容器內所有元件區塊皆有flex效果。  最外層容器具有水平軸(main axis)、垂直軸(cross axis)、水平的起點與終點(main start、main end)、垂直的起點與終點(cross start、cross end)、水平尺寸(main size)與垂直尺寸(cross size)。  因此透過上圖，flexbox的模型概念可以了解成：
在一個有flex效果的父元件容器(container)當中，裝載著各個區塊子元件(items)，而每個item擺放的位置可透過設定main與cross去劃分位置，將各個區塊擺到相對應的位置上。
以下將分別介紹父元件容器(container)與子元件區塊(items)可應用的屬性。
父元件容器(container) display 在最外層容器一定要設定有flex效果，其內部子元件才會跟著有flex效果。使用display屬性設定，有兩種方式：
 display: flex：類似display: block，後方元素會強迫換行，但子元件有更多彈性的設定。 display: inline-flex：類似display: inline-block，意思即一個display: flex外包覆一個display: inline的屬性，後方元素不會換行。  .flex-container { display: flex | inline-flex; }  flex-direction 設定內部子元件的「排列方向」(主軸方向)。
預設值為先由左到右，再從上到下，總共有四種排列方式可以設定：
 flex-direction: row：預設值，先由左到右，再從上到下。 flex-direction: row-reverse：與row相反。 flex-direction: column：先從上到下，再由左到右。 flex-direction: column-reverse：與column相反。  .flex-container { display: flex; flex-direction: row | row-reverse | column | column-reverse; }  flex-wrap 設定內部子元件在父元件有限寬度內「是否換行」。</description>
    </item>
    
    <item>
      <title>［Java］異常處理機制：throw與throws</title>
      <link>https://eva19950630.github.io/2018/18_11_02_java-throw-throws/</link>
      <pubDate>Fri, 02 Nov 2018 21:31:53 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_11_02_java-throw-throws/</guid>
      <description>throw 用於丟出一個異常物件。
語法：寫於程式語句中。
throw [例外物件變數];
舉例：throw new Exception(&amp;ldquo;這是例外錯誤！&amp;rdquo;);
throws 用於宣告此method會丟出哪些Exception，表示此method可能會發生哪些例外，加s意指可以同時使用多個Exception子類別修飾方法。
語法：寫於宣告method的地方。
舉例：public void function() throws Exception {&amp;hellip;}
上述兩者差異  寫的地方不同：throw寫在語句中；throws寫在函數頭。 執行可能性：若編譯過程中執行throw則表示一定發生異常；而throws只是宣告該method可能發生異常，但不一定會發生這些異常。  配合使用try catch Coding時，盡可能在可能出現異常的地方，使用try{...}catch{...}來捕捉(發現)異常並進行處理。
發現異常後，一定要在catch{...}內進行異常發生時的處理。
如果有在method內寫throw語句丟出異常，盡量在函數頭加上throws進行聲明，若真的發生異常，則會將異常交給上層呼叫此異常方法進行處理(通常在catch{...}內)。
Example
public class test { public static void main (String[] args) { try { score(101); } catch (Exception e) { System.out.println(e.getMessage()); } } public static void score(int num) throws Exception { if (num &amp;gt; 100) throw new Exception(&amp;quot;Over&amp;quot;); } }  Tips</description>
    </item>
    
    <item>
      <title>使用Github Pages架設Hugo靜態blog</title>
      <link>https://eva19950630.github.io/2018/18_10_29_github-pages-hugo/</link>
      <pubDate>Mon, 29 Oct 2018 09:50:03 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_10_29_github-pages-hugo/</guid>
      <description>Github除了可以使用Git Server儲存code之外，也可當作靜態網頁的Server，所以可作為個人靜態網頁或blog，但僅能使用git指令上傳修改檔案，而且只能顯示「靜態」網頁內容。
操作步驟分為兩部分(使用MacOS)  在本地端架設Hugo個人網站(blog) 部署至Github上成為個人Github pages  第一部分：在本地端架設Hugo個人網站(blog) Hugo為open source的靜態網頁框架產生器，可快速建立個人網站或blog。
Step1：使用terminal安裝Homebrew Homebrew為open source的軟體套件管理工具，可簡化在Mac上安裝或卸載套件的過程。
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  Step2：使用terminal安裝Hugo brew install hugo  Step3：使用Hugo創建新網站 到想要的目錄下，創建Hugo新網站。
# [website-name]為自定網站資料夾名稱 hugo new site [website-name] cd [website-name]  創建完成後，可在terminal看到以下畫面： cd至該網站資料夾內，可看到內部資料夾結構如下： Step4：更換主題(Theme) 官網提供許多網站主題，若找到合適的即可使用git clone下載該主題。
在官網主題內找尋喜歡的主題，並點選進去： 複製該主題的git網址，並使用git clone下載至themes資料夾中： cd至剛Step3創建好Hugo網站根目錄下的themes資料夾中(預設目前路徑在Hugo網站根目錄下)：
cd themes git clone [該主題git網址]  Step5：編輯config.toml檔案 config.toml檔案在根目錄下，使用sublime或其他文字編輯器進行修改，由於之後會將此Hugo個人網站部署至Github上，因此baseURL需配置為Github pages的網址，而theme為更換剛剛Step4下載的主題資料夾名稱。
baseURL = &amp;quot;https://[個人Github帳號].github.io/&amp;quot; # [個人Github帳號]需改為Github帳號 languageCode = &amp;quot;zh-tw&amp;quot; title = &amp;quot;[My New Hugo Site]&amp;quot; # [My New Hugo Site]為自定網站名稱 theme = &amp;quot;[Theme dir name]&amp;quot; # [Theme dir name]為主題資料夾名稱  Step6：建立新文章(post) 在根目錄下輸入以下指令建立新文章。</description>
    </item>
    
    <item>
      <title>Markdown筆記</title>
      <link>https://eva19950630.github.io/2018/18_10_28_markdown-note/</link>
      <pubDate>Sun, 28 Oct 2018 20:27:16 +0800</pubDate>
      
      <guid>https://eva19950630.github.io/2018/18_10_28_markdown-note/</guid>
      <description>一般文字(Text) test
標題(Title) # test1.1 ## test1.2 ### test1.3 #### test1.4 ##### test1.5 ###### test1.6  Example
test1.1 test1.2 test1.3 test1.4 test1.5 test1.6 引用文字(Blockquote) &amp;gt; test2  Example
 test2
 粗體/斜體/刪除線 # 粗體 **test3.1** __test3.2__ # 斜體 *test4.1* _test4.2_ # 刪除線 ~~test5~~  Example
test3.1
test3.2
test4.1
test4.2
test5
無序列點 * test6.1 * test6.2 * test6.3 - test6.4 - test6.5 - test6.6  Example
 test6.1 test6.2 test6.3</description>
    </item>
    
  </channel>
</rss>